#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 23 11:10:55 2019

@author: Thomas Meiller-Legrand

Script used to plot the growth curves and calculate the doubling time.

This scripts takes as an input a table generated by a BMG FLUOstar OMEGA plate
reader and the associated Mars software and outputs growth curves for these
inputs as well as the doubing time in exponential phase (here taken to be when
the OD is between 0.2 and 0.7).

The script is organised like such:
    - Sorting the data (we randomised the samples on the plate so they need to
      sorted) and calculating the mean of the technical replicates for each
      biological replicate).
    - Calculating the mean growth curve based on three biological replicates
      (optional)
    - Plotting the data and outputting the graph
    - Calculating the doubling time using a linear fit for the OD values
      between 0.2 and 0.7 and outputting the results in an Excel file.
"""

from pathlib import Path

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression


def Technical_replicate_mean(FileName):
    # This function is used to calculate the mean OD values of the technical
    # replicates.

    df = pd.read_excel(FileName, sheet_name="All Cycles")  # Opens the raw data
    # file
    df2 = df[10:75]  # Removes the metadata included at the top of the
    # spreadsheet containing the data.
    df3 = df2.sort_values('Unnamed: 3')  # This sorts the data (if using a
    # randomised plate) so that the technical replicates values are in
    # neighbouring cells.
    df4 = df3.loc[:, 'Unnamed: 292':]  # This removes the columns containing
    # the names of the wells and the label of the strains.

    replicate_means = []

    # Here we're going through the table and calculating the mean.
    for i in range(0, (len(df4)-5), 3):
        temp_df = df4.iloc[[i, i+1, i+2]]  # Storing the 3 time series
        # containing the OD values for one strain.
        temp_mean = temp_df.mean(axis=0)  # Calculating the mean of the OD
        # values for every time point.
        replicate_means.append(temp_mean)  # Appends the time series of the
        # mean OD value to a list storing the mean time series for each strain.

    # I have 4 wells containing water so I calculate the mean OD separately for
    # these. This can be skipped in general.
    temp_df = df4.iloc[[60, 61, 62, 63]]
    temp_mean = temp_df.mean(axis=0)
    replicate_means.append(temp_mean)

    return(replicate_means)  # Returns the list containing the averaged time
    # series of OD values


# Calculating the average of the technical replicates for each biological
# replicate
#pathToBioRep1Data = "<Path to raw data Excel files for replicate 1"
#pathToBioRep2Data = "<Path to raw data Excel files for replicate 2"
#pathToBioRep3Data = "<Path to raw data Excel files for replicate 3"
#nameOfRep1File = "<Name of Excel file for replicate 1"
#nameOfRep2File = "<Name of Excel file for replicate 2"
#nameOfRep3File = "<Name of Excel file for replicate 3"
# In my case:
pathToBioRep1Data = Path("/Users/user/Documents/DPhil_Projects/Collaborations/KrishnaKumar_etal_DropletPrinting/RawData/Bacterial-Growth-Kinetics/2019-10-11_StrainsRav_GrowthCurves-1/")
pathToBioRep2Data = Path("/Users/user/Documents/DPhil_Projects/Collaborations/KrishnaKumar_etal_DropletPrinting/RawData/Bacterial-Growth-Kinetics/2019-10-18_StrainsRav_GrowthCurves-2/")
pathToBioRep3Data = Path("/Users/user/Documents/DPhil_Projects/Collaborations/KrishnaKumar_etal_DropletPrinting/RawData/Bacterial-Growth-Kinetics/2019-10-24_StrainsRav_GrowthCurves-3/")
nameOfRep1File = "2019-10-11-TML_StrainRav_GrowthCurves-1.xlsx"
nameOfRep2File = "2019-10-18-TML_StrainsRav_GrowthCurves-2.xlsx"
nameOfRep3File = "2019-10-24-TML_StrainsRav_GrowthCurves-3.xlsx"
br1 = Technical_replicate_mean(pathToBioRep1Data / nameOfRep1File)
br2 = Technical_replicate_mean(pathToBioRep2Data / nameOfRep2File)
br3 = Technical_replicate_mean(pathToBioRep3Data / nameOfRep3File)

# If one wants to do the anlysis on the average of the biological replicates,
# this calculates it.
mean_biorep = []
for j in range(21):
    temp_concatenated_data = pd.concat((br1[j], br2[j], br3[j]), axis=1)
    mean_biorep.append(temp_concatenated_data.mean(axis=1))

pathToOutput = Path("<Path to the folder where the outputs should be saved>")
# Example:
# pathToOutput = Path("/Users/user/Documents/DPhil_Projects/Collaborations/KrishnaKumar_etal_DropletPrinting/Results/Bacterial-Growth-Kinetics/GrowthCurves_DoublingTime/")

# Creates a graph with the mean growth curves.
x = np.arange(0, 288*5, 5)  # Creates a vector for time. We have 288 time
# points spaced every 5 minute (24 hours = 288*5)
figure = plt.figure()
ax = plt.subplot(111)
legend = ['BZB1011 WT',
          'BZB 1011 Tn7::sfGFP',
          'BZB 1011 Tn7::mRFP',
          'BZB 1011 ColE2',
          'BZB 1011 Tn7::sfGFP ColE2',
          'BZB 1011 Tn7::mRFP ColE2',
          'BZB 1011 ColE7',
          'BZB 1011 Tn7::mRFP (?) ColE7',
          'BZB 1011 ColE8',
          'BZB 1011 Tn7::mRFP (?) ColE8',
          'BZB 1011 ColA',
          'BZB 1011 Tn7::sfGFP ColA',
          'BZB 1011 Tn7::mRFP ColA',
          'BZB 1011 ∆btuB',
          'BZB 1011 ∆btuB Tn7::sfGFP',
          'BZB 1011 ∆btuB Tn7::mRFP',
          'BZB 1011 + pC001',
          'BZB 1011 Tn7::ImmE2 + pBC20(?) (Ypet)',
          'BZB 1011 Tn7::ImmE2 + pBC43(?) (NeonGreen)',
          'LB',
          'H2O']

# Plots the data (including the values for LB and H2O which can be ignored by
# shortening the range). Individual biolgical replicates can be plotted instead
# by calling br1[k], br2[k] or br3[k] instead of mean_biorep[k].
for k in range(21):
    ax.plot(x, mean_biorep[k], label=legend[k])

# Adds title, axis labels and a legend and saves the figure
plt.title('Growth curves of the strains used in this study')
plt.xlabel('Time (minutes)')
plt.ylabel('Optical Density (700 nm)')
ax.set_yscale('log')
chartBox = ax.get_position()
ax.set_position([chartBox.x0,
                 chartBox.y0,
                 chartBox.width*1.4,
                 chartBox.height*1.4])
ax.legend(loc='upper center',
          bbox_to_anchor=(1.35, 1.025),
          shadow=False, ncol=1)
nameOfFigureFile = "<Name of figure output>"
# Example:
# nameOfFigureFile = "2019-11-26-TML_DropletPriting_StrainsGrowthCurves-Test"
plt.savefig(pathToOutput / nameOfFigureFile,
            quality=100,
            dpi=300,
            bbox_inches='tight')


def fit_data(data_set):
    # Creates a linear regression model of the exponential part of the growth
    # curve and outputs the doubling times of all the strains. Here we exclude
    # LB and H2O from the calculation, hence range(19).
    doubling_times = []

    for l in range(19):
        model = LinearRegression()
        early_phase = data_set[l][0:144]  # Here the late time points value are
        # removed to avoid having the values below OD = 1 for late time points
        # (OD dropping) which might affect the fit.
        # We then Select the values of OD to do the fit on. Here values of OD
        # between 0.2 and 0.7.
        expInBottom = np.where(early_phase >= 0.1)  # Finds the OD value above
        # 0.2
        expInBottom_first = expInBottom[0][0]  # Takes the first of these
        # values (first time OD goes above 0.2)
        expInTop = np.where(early_phase <= 0.3)  # Finds the OD value below 0.7
        expInTop_last = expInTop[0][-1]  # Takes the last of these values
        # (last time OD is below 0.7)
        # The following do a linear fit of the data
        x_exp = x[expInBottom_first:expInTop_last]
        y_exp = np.log(data_set[l][expInBottom_first:expInTop_last])
        model.fit(x_exp.reshape((-1, 1)), y_exp)
        y_new = model.predict(x_exp[:, np.newaxis])
        xt2 = (np.log(2)/model.coef_)
        doubling_times.append(float(xt2))

    return(doubling_times)


# Makes a linear fit of all the replicates and returns the doubling times
doubling_times_br1 = fit_data(br1)
doubling_times_br2 = fit_data(br2)
doubling_times_br3 = fit_data(br3)

# Makes a linear fit and returns the doubling times of the mean the 3
# biological replicates.
doubling_times = fit_data(mean_biorep)

# Saving the doubling times to an Excel file.
nameOfDoublingTimeFile = "<Name of output file>.xlsx"
# Example:
# nameOfDoublingTimeFile = "2020-03-25-TML_DropletPrinting_StrainsDoublingTimes-Replicates-Liquid_0p2-0p8-Test.xlsx"
array = [legend,
         list(doubling_times_br1),
         doubling_times_br2,
         doubling_times_br3,
         doubling_times]
array_df = pd.DataFrame(array).T
array_df.columns = ['Strains',
                    'Replicate 1',
                    'Replicate 2',
                    'Replicate 3',
                    'Fit on mean']
array_df.to_excel(excel_writer=pathToOutput / nameOfDoublingTimeFile)
